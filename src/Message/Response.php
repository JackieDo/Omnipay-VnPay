<?php namespace Omnipay\VnPay\Message;

use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RequestInterface;
use Omnipay\VnPay\Traits\HasCheckSumTrait;

/**
 * The Response abstraction
 */
class Response extends AbstractResponse
{
    use HasCheckSumTrait;

    /**
     * Response status codes
     *
     * @var array
     */
    protected $responseCodes = [
        '00' => 'Query is successful.',
        '01' => 'Transaction already exists.',
        '02' => 'Invalid Merchant (check vnp_TmnCode parameter).',
        '03' => 'Data sent to the payment gateway is malformed.',
        '04' => 'Transaction failed: This website is being temporarily locked.',
        '05' => 'Transaction failed: Entered the wrong password exceed the number of times specified. Please repeat the transaction.',
        '06' => 'Transaction failed: Entered incorrect password transaction (OTP). Please repeat the transaction.',
        '07' => 'Successfully executed but transaction is suspected of fraudulent transactions.',
        '08' => 'Transaction failed: Banking system is under maintenance. Please do not temporarily make transactions by card / account of this bank.',
        '09' => 'Transaction failed: Card / account not yet registered for Internet Banking service.',
        '10' => 'Transaction failed: Card / account information incorrectly validated more than 3 times.',
        '11' => 'Transaction failed: Exceeded the timeout. Please repeat the transaction.',
        '12' => 'Transaction failed: Card / account is locked.',
        '24' => 'Transaction failed: Customer cancels the transaction.',
        '51' => 'Transaction failed: Account does not have sufficient balance to trade.',
        '65' => 'Transaction failed: Account has exceeded daily transaction limit.',
        '75' => 'Transaction failed: Banking system is under maintenance. Please do not temporarily make transactions by card / account of this bank.',
        '91' => 'Transaction is not found.',
        '93' => 'The refund amount is invalid. The refund amount must be less than or equal to the payment amount.',
        '94' => 'This refund request has been submitted in the past. This request VNPAY is processing.',
        '95' => 'This refund request was not successful with VNPAY. VNPAY refuses to process the request.',
        '97' => 'Invalid signature.',
        '99' => 'Unknown errors.',
    ];

    /**
     * Initialize response instance
     *
     * @param RequestInterface $request
     * @param mixed            $data
     */
    public function __construct(RequestInterface $request, $data)
    {
        $this->request = $request;

        if (!is_array($data)) {
            parse_str($data, $this->data);
        } else {
            $this->data = $data;
        }

        $this->setCheckSum($this->data, $this->request->getHashSecret());
    }

    /**
     * Is the response successful?
     *
     * @return boolean
     */
    public function isSuccessful()
    {
        return $this->getCode() === '00' && $this->isHashMatch();
    }

    /**
     * Is the transaction cancelled by the user?
     *
     * @return boolean
     */
    public function isCancelled()
    {
        return $this->getCode() === '24' && $this->isHashMatch();
    }

    /**
     * Is the response pending?
     *
     * @return boolean
     */
    public function isPending()
    {
        return false;
    }

    /**
     * Determine if secure hash response from server match with computed hash value
     *
     * @return boolean
     */
    protected function isHashMatch()
    {
        return (isset($this->data['vnp_SecureHash']) && strtoupper($this->data['vnp_SecureHash']) == strtoupper($this->getCheckSum()));
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        if (isset($this->data['vnp_TxnRef'])) {
            return $this->data['vnp_TxnRef'];
        }

        return null;
    }

    /**
     * Gateway Reference
     *
     * @return null|string A reference provided by the gateway to represent this transaction
     */
    public function getTransactionReference()
    {
        if (isset($this->data['vnp_TransactionNo'])) {
            return $this->data['vnp_TransactionNo'];
        }

        return null;
    }

    /**
     * Response code
     *
     * @return null|string A response code from the payment gateway
     */
    public function getCode()
    {
        if (isset($this->data['vnp_ResponseCode'])) {
            return $this->data['vnp_ResponseCode'];
        }

        return null;
    }

    /**
     * Alias of the getCode() method
     *
     * @return null|string
     */
    public function getResponseCode()
    {
        return $this->getCode();
    }

    /**
     * Get message
     *
     * @return null|string Description of response code or message from server
     */
    public function getMessage()
    {
        if (isset($this->data['vnp_Message'])) {
            return $this->data['vnp_Message'];
        }

        if (isset($this->data['vnp_ResponseCode'])) {
            return $this->getResponseDescription($this->data['vnp_ResponseCode']);
        }

        return null;
    }

    /**
     * Get response description
     *
     * @param  string $responseCode
     *
     * @return string Desciption of response code
     */
    public function getResponseDescription($responseCode)
    {
        if (array_key_exists($responseCode, $this->responseCodes)) {
            return $this->responseCodes[$responseCode];
        }

        return 'Unable to be determined the error information. Code: ' . $responseCode;
    }
}
