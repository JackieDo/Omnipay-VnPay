<?php namespace Omnipay\VnPay\Message;

use Omnipay\Common\CurrencyTest;
use Omnipay\Common\Message\AbstractRequest as BaseAbstractRequest;
use Omnipay\Validator\Traits\ValidatorTrait;
use Omnipay\VnPay\Traits\HasCheckSumTrait;
use Omnipay\VnPay\Traits\ParamsAccessorMutatorTrait;

/**
 * VnPay Abstract Request
 */
abstract class AbstractRequest extends BaseAbstractRequest
{
    use HasCheckSumTrait, ParamsAccessorMutatorTrait, ValidatorTrait;

    /**
     * API version
     */
    const API_VERSION = '2.0.0';

    /**
     * Endpoint URL in production
     *
     * @var string
     */
    protected $liveEndpoint = 'https://pay.vnpay.vn/vpcpay.html';

    /**
     * Endpoint URL in test mode
     *
     * @var string
     */
    protected $testEndpoint = 'http://sandbox.vnpayment.vn/paymentv2/vpcpay.html';

    /**
     * Get list of parameters to be converted.
     *
     * @return array
     */
    public function getParametricConverter()
    {
        return [
            'tmnCode'         => 'vnp_TmnCode',
            'hashSecret'      => 'vnp_HashSecret',
            'orderInfo'       => 'vnp_OrderInfo',
            'amount'          => 'vnp_Amount',
            'returnUrl'       => 'vnp_ReturnUrl',
            'currency'        => 'vnp_CurrCode',
            'txnRef'          => 'vnp_TxnRef',
            'transDate'       => 'vnp_TransDate',
            'transactionType' => 'vnp_TransactionType',
            'transactionNo'   => 'vnp_TransactionNo',
            'createBy'        => 'vnp_CreateBy',
            'createDate'      => 'vnp_CreateDate',
        ];
    }

    /**
     * Get amount based on VnPay format rule
     *
     * @return string
     */
    public function getFormatedAmount()
    {
        $amount = (int) $this->getAmount();

        return $amount * 100;
    }

    /**
     * Get value of the txnRef parameter
     *
     * @return string
     */
    public function getTxnRef()
    {
        return $this->getParameter('txnRef');
    }

    /**
     * Set value of the txnRef parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setTxnRef($value)
    {
        return $this->setParameter('txnRef', $value);
    }

    /**
     * Get the transaction ID.
     *
     * The transaction ID is the identifier generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->getTxnRef();
    }

    /**
     * Sets the transaction ID.
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setTransactionId($value)
    {
        return $this->setTxnRef($value);
    }

    /**
     * Get value of the orderInfo parameter
     *
     * @return string
     */
    public function getOrderInfo()
    {
        return $this->getParameter('orderInfo');
    }

    /**
     * Set value of the orderInfo parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setOrderInfo($value)
    {
        return $this->setParameter('orderInfo', $value);
    }

    /**
     * Get the request description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->getOrderInfo();
    }

    /**
     * Sets the request description.
     *
     * @param string $value
     * @return $this
     */
    public function setDescription($value)
    {
        return $this->setOrderInfo($value);
    }

    /**
     * Get value of the locale parameter
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->getParameter('locale');
    }

    /**
     * Set value of the locale parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setLocale($value)
    {
        return $this->setParameter('locale', $value);
    }

    /**
     * Get value of the currCode parameter
     *
     * @return string
     */
    public function getCurrCode()
    {
        return $this->getCurrency();
    }

    /**
     * Set value of the currCode parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setCurrCode($value)
    {
        return $this->setCurrency($value);
    }

    /**
     * Get value of the bankCode parameter
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->getParameter('bankCode');
    }

    /**
     * Set value of the bankCode parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBankCode($value)
    {
        return $this->setParameter('bankCode', $value);
    }

    /**
     * Base data
     *
     * @return array
     */
    protected function getBaseData()
    {
        return [
            'vnp_Version' => $this::API_VERSION,
            'vnp_TmnCode' => $this->getTmnCode(),
        ];
    }

    /**
     * Determine URI endpoint of gateway
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->getTestMode() ? $this->testEndpoint : $this->liveEndpoint;
    }
}
